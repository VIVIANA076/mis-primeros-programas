# -*- coding: utf-8 -*-
"""
/***************************************************************************
 poligono_coordenadasDockWidget
                                 A QGIS plugin
 carga un archivo con coordenadas y genera el poligono 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-06-05
        git sha              : $Format:%H$
        copyright            : (C) 2021 by viviana
        email                : vivianaandrea26@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal

from qgis.core import QgsProject,QgsVectorLayer,QgsField,QgsFeature,QgsGeometry,QgsPointXY
from PyQt5.QtCore import QVariant
from osgeo import ogr
from pyproj import Proj
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Pol_coord_dockwidget_base.ui'))


class poligono_coordenadasDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(poligono_coordenadasDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.qfw_seleccionar.setFilter("Archivos.csv(*.csv)") #filtrar tipos de archivo
        # enlazar los botones al programa
        self.btn_cargar.clicked.connect(self.cargar_datos) #cargar los datos
        self.btn_crearpunto.clicked.connect(self.crear_puntos) #crear capa puntos
        self.btn_crearpoligono.clicked.connect(self.crear_poligono)  # crear capa poligono
        self.btn_borrar.clicked.connect(self.borrar)#borrar lista cargada

    def borrar(self,event):
        while (self.qtw_table.rowCount() > 0):
            self.qtw_table.removeRow(0) #elimino todos los registros

    def cargar_datos(self,event):
        ruta=str(self.qfw_seleccionar.filePath())#buscar la ruta
        with open(ruta,'r') as leer_csv: #lea el archivo que esta en ruta
            lineas=leer_csv.read().splitlines() #leo las lineas y las guardo en el vctor
            contar=0
            for linea in lineas: #recorrer las lineas y leerlas
                if contar>0:
                    campos=linea.split(';')#separar los columnas
                    self.qtw_table.insertRow(self.qtw_table.rowCount()) #anadir informacion a la tabla por lineas
                    self.qtw_table.setItem(self.qtw_table.rowCount()-1,0,QtWidgets.QTableWidgetItem(campos[0]))
                    self.qtw_table.setItem(self.qtw_table.rowCount()-1,1, QtWidgets.QTableWidgetItem(campos[1]))
                    self.qtw_table.setItem(self.qtw_table.rowCount()-1,2, QtWidgets.QTableWidgetItem(campos[2]))

                contar=contar+1

    def crear_puntos (self, event):
        vpunto=QgsVectorLayer('Point?crs=ESPG:3116','NODOS DEL PREDIO','memory') #crear la capa qgis tipo punto
        provider=vpunto.dataProvider()
        provider.addAttributes([QgsField('ID_vertice',QVariant.String),QgsField('NORTE',QVariant.String),QgsField('ESTE',QVariant.String)])#crear campos para la capa
        vpunto.updateFields()
        for fila in range(0,self.qtw_table.rowCount()): #recorra la tabla
            f=QgsFeature() #cada registro
            f.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(float(self.qtw_table.item(fila,1).text()),float(self.qtw_table.item(fila,2).text())))) #convertir puntos las coordenadas
            f.setAttributes([self.qtw_table.item(fila,0).text(),self.qtw_table.item(fila,1).text(),self.qtw_table.item(fila,2).text()])
            provider.addFeature(f)
        vpunto.updateExtents()
        QgsProject.instance().addMapLayer(vpunto) #qgis visualiza la capa

    def crear_poligono (self,event):

        vpoligono = QgsVectorLayer('Polygon?crs=ESPG:3116', 'PREDIO', 'memory')
        provider = vpoligono.dataProvider()
        provider.addAttributes([QgsField('ID_poligono', QVariant.String), QgsField('area', QVariant.String),
                                QgsField('perimetro', QVariant.String)])
        vpoligono.updateFields()
        vertices = [QgsPointXY(float(self.qtw_table.item(0, 1).text()), float(self.qtw_table.item(0, 2).text()))]

        for fila in range(0, self.qtw_table.rowCount()):  # recorra la tabla
            vertices.append(QgsPointXY(float(self.qtw_table.item(fila,1).text()), float(self.qtw_table.item(fila,2).text())))
        vertices.append(QgsPointXY(float(self.qtw_table.item(0, 1).text()), float(self.qtw_table.item(0, 2).text())))
        f = QgsFeature()
        f.setGeometry(QgsGeometry.fromPolygonXY([vertices]))
        geom = f.geometry()
        area = geom.area()
        perimetro=geom.length()
        f.setAttributes([1, area, perimetro])
        provider.addFeatures([f])
        vpoligono.updateExtents()
        QgsProject.instance().addMapLayers([vpoligono])

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
